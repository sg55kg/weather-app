{"version":3,"sources":["components/UserInput/UserInput.js","components/Loading/Loading.js","components/Error/Error.js","components/Weather/Weekday/Weekday.js","components/Weather/Image/Image.js","components/Weather/Temperature/Temperature.js","components/Weather/Weather.js","components/WeatherGroup/WeatherGroup.js","hooks/useWeatherData.js","App.js","config.js","index.js"],"names":["UserInput","city","setCity","setCountry","country","className","onSubmit","e","preventDefault","target","elements","value","type","name","placeholder","autoComplete","Loading","Error","error","Weekday","day","Image","id","src","alt","Temperature","current","min","max","Weather","dataDay","today","date","icon","WeatherGroup","data","console","log","map","idx","isDesiredIndex","_","i","App","useState","options","isLoading","setIsLoading","setError","setData","apiUrl","units","createApiUrl","useEffect","getWeatherData","a","fetch","res","ok","status","json","dataArr","list","filter","d","dt_txt","main","weather","temp","temp_min","temp_max","Date","toLocaleDateString","weekday","loading","useWeatherData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93f3cf83.chunk.js","sourcesContent":["import './styles.css';\n\nconst UserInput = ({ city, setCity, country, setCountry }) => {\n\n\n    //useWeatherData(`${city}`, `${country}`, { units: \"imperial\"});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCity(e.target.elements.city.value);\n        setCountry(e.target.elements.city.value);\n    }\n\n    return (\n        <div className=\"user-input-div\">\n        \n            <form onSubmit={handleSubmit}>\n                <p>City</p>\n                <input type=\"text\" name=\"city\" placeholder=\"Enter city\" autoComplete=\"off\"  />\n                <p>Country</p>\n                <input type=\"text\" name=\"country\" placeholder=\"Enter country\" autoComplete=\"off\" />\n                <button type=\"submit\">Enter</button>\n            </form>\n\n        </div>\n    )\n}\n\nexport default UserInput;","const Loading = () => {\n    return (\n        <p>Loading...</p>\n    )\n}\n\nexport default Loading;","const Error = ({ error }) => {\n    return (\n        <div>\n            <h3>There was an issue loading this</h3>\n            <p>{`${error}`}</p>\n        </div>\n    )\n}\n\nexport default Error;","const Weekday = ({ day }) => {\n    return (\n        <p className=\"day\">{`${day}`}</p>\n    )\n}\n\nexport default Weekday;","\nconst Image = ({ id }) => {\n    return (\n        <img src={`http://openweathermap.org/img/w/${id}.png`} alt=\"pic\" />\n    )\n}\n\nexport default Image;","const Temperature = ({current, min, max}) => {\n    return (\n        <div className=\"temp\">\n            <h4>{current}&deg;</h4>\n            <div className=\"minor-temps\">\n            <p>{min}&deg;</p>\n            <p>{max}&deg;</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Temperature;","import Weekday from './Weekday/Weekday';\nimport Image from './Image/Image';\nimport Temperature from './Temperature/Temperature';\nimport './styles.css';\n\nconst Weather = ({ dataDay, today }) => {\n    return (\n        <div className={today ? \"today\" : \"weather-card\"}>\n            <Weekday day={today ? 'Today' : dataDay.date} />\n            <Image id={dataDay.icon} />\n            <Temperature current={dataDay.current} min={dataDay.min} max={dataDay.max} />\n        </div>\n    )\n}\n\nexport default Weather;","import Weather from '../Weather/Weather';\nimport './styles.css';\n\nconst WeatherGroup = ({ data }) => {\n    console.log(data);\n    return (\n        <div className=\"weather-group\">\n        {data.map((dataDay, idx) => (\n            <Weather today={idx === 0} key={dataDay.date} dataDay={dataDay} />\n        ))}\n        </div>\n    )\n}\n\nexport default WeatherGroup;","import { useState, useEffect } from 'react';\nimport { API_KEY } from '../constants';\n\nconst createApiUrl = (city, country, { units = 'standard'}) => {\n    return `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&units=${units}&appid=${API_KEY}`;\n}\n\nconst isDesiredIndex = (_,i) => i % 8 === 0;\n\nconst useWeatherData = (city, country, options) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [data, setData] = useState();\n\n    const apiUrl = createApiUrl(city, country, options);\n\n    useEffect(() => {\n        const getWeatherData = async () => {\n            const res = await fetch(apiUrl);\n\n            try {\n                if(!res.ok) {\n                    throw new Error(`${res.status}`);\n                }\n                const data = await res.json();\n\n                const dataArr = data.list.filter(isDesiredIndex).map((d) => {\n                    const {dt_txt, main, weather } = d;\n\n                    const icon = weather[0].icon;\n                    const current = main.temp;\n                    const min = main.temp_min;\n                    const max = main.temp_max;\n                    const date = new Date(dt_txt).toLocaleDateString('en-US', {\n                        weekday: 'short'\n                    });\n                    return {icon, current, min, max, date};\n                });\n                console.log(data);\n                console.log(dataArr)\n\n                setData(dataArr);\n                setIsLoading(false);\n            } catch (err) {\n                setError(err);\n                setIsLoading(false);\n            }\n        }\n        getWeatherData();\n    }, [apiUrl]);\n\n    return {\n        loading: isLoading,\n        error,\n        data\n    }\n}\n\nexport { useWeatherData };","import UserInput from './components/UserInput/UserInput';\nimport Loading from './components/Loading/Loading';\nimport Error from './components/Error/Error';\nimport WeatherGroup from \"./components/WeatherGroup/WeatherGroup\";\nimport { useWeatherData } from './hooks/useWeatherData';\n\nimport { useState } from 'react';\n\nconst App = () => {\n\n    const [city, setCity] = useState('London');\n    const [country, setCountry] = useState('GB');\n\n    const { data, loading, error } = useWeatherData(`${city}`, `${country}`, { units: \"imperial\"});\n\n    \n\n    return (\n        <div className=\"container\">\n            <UserInput city={city} setCity={setCity} country={country} setCountry={setCountry} />\n            {loading && !error && <Loading loading={loading} />}\n            {error && <Error error={error} />}   \n            {!error && !loading && <WeatherGroup data={data} />}       \n        </div>\n    )\n}\n\nexport default App;","export const config = {\n    API_KEY: 'd9ef9f4b2c58b21137d07d1bef1fc433'\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}